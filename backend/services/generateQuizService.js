import 'dotenv/config.js'; 
import {generateQuizGroqToJSON, extractTextFromPDF, generateQuizFromText} from "../config/generateQuiz.js"; 
import {GoogleGenerativeAI} from "@google/generative-ai"
import {introduceWebsiteDeclaration, 
        describeWebsiteDeclaration} from "./functionDeclaration.js";
import {setQuiz, describeWebsiteInfo} from "./functionCall.js";


const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);


  const generativeModel = genAI.getGenerativeModel({
    model: 'gemini-1.5-flash',
    tools: [
      {
        functionDeclarations: [
      //    createQuizFunctionDeclaration,
          describeWebsiteDeclaration,
          introduceWebsiteDeclaration,
        ],
      },
    ],
  });
  
  

  const functions = {
    // createQuiz: ({ topics, questionTypes, numberOfQuestions, difficulty }) => {
    //   return setQuiz(topics, questionTypes, numberOfQuestions, difficulty);
    // },
    describeWebsite: ({ websiteType, mainFeatures, purpose }) => {
      return describeWebsiteInfo("Quiz online", 
        ["T·∫°o quiz","Ch∆°i quiz", "Qu·∫£n l√Ω t√†i kho·∫£n", "T√¨m ki·∫øm quiz",  "T·∫°o Room v√† ch∆°i quiz trong room"],
        "To√†n b·ªô ng∆∞·ªùi d√πng c√≥ nh∆∞ c·∫ßu", purpose="Gi√∫p ng∆∞·ªùi d√πng t·∫°o quiz v√† ch∆°i quiz",);
    },
    introduceWebsite: () => {
      return "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω AI t·∫°i trang web n√†y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√°c b√†i quiz, luy·ªán t·∫≠p ki·∫øn th·ª©c theo ch·ªß ƒë·ªÅ, ho·∫∑c h·ªó tr·ª£ h·ªçc t·∫≠p hi·ªáu qu·∫£ h∆°n. H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën b·∫Øt ƒë·∫ßu v·ªõi ch·ªß ƒë·ªÅ n√†o, ho·∫∑c t√¥i c√≥ th·ªÉ g·ª£i √Ω n·∫øu b·∫°n ch∆∞a r√µ nh√©!";
    },
  };
  
  export async function generateQuiz(prompt) {
    try {
      
      const chat = await generativeModel.startChat();
      
      const result = await chat.sendMessage(prompt);

      const call = result.response.functionCalls()?.[0];

      if (call) {
        console.log("‚úÖ Nh·∫≠n function call t·ª´ Gemini:", call.name);
        
        const apiResponse = await functions[call.name](call.args);
        console.log("üîπ G·ªçi Groq API ƒë·ªÉ t·∫°o quiz...");
        
        return generateQuizGroqToJSON(apiResponse.topics, apiResponse.questionTypes, apiResponse.numberOfQuestions, apiResponse.difficulty);
      } else {
        console.log("‚ùå Kh√¥ng c√≥ function call n√†o ƒë∆∞·ª£c t·∫°o!");
        
        return generateQuizGroqToJSON(
          ["General Knowledge"], 
          ["Multiple choices"], 
          5, 
          "trung b√¨nh"
        );
      }
    } catch (error) {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh t·∫°o quiz:", error);
      // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ null
      return [];
    }
  }

  export async function initChatBot(prompt) {
    try {
      console.log("üîπ T·∫°o quiz t·ª´ prompt:", prompt);
          const systemPrompt = "B·∫°n l√† tr·ª£ l√Ω th√¥ng minh. Khi ng∆∞·ªùi d√πng h·ªèi, n·∫øu c√≥ function ph√π h·ª£p, b·∫°n s·∫Ω g·ªçi function ƒë√≥ thay v√¨ tr·∫£ l·ªùi tr·ª±c ti·∫øp. N·∫øu kh√¥ng c√≥ function ph√π h·ª£p, h√£y h·ªèi th√™m th√¥ng tin.";

      const chat = await generativeModel.startChat({ temperature: 0.2, systemMessage: systemPrompt });
      
      const result = await chat.sendMessage(prompt);
      

      const call = result.response.functionCalls()?.[0];

      if (call) {
         
        const apiResponse = await functions[call.name](call.args);
        return apiResponse;
      } else {
        console.log("‚ùå Kh√¥ng c√≥ function call n√†o ƒë∆∞·ª£c t·∫°o!");
       
      }
    } catch (error) {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh t·∫°o quiz:", error);
      // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ null
      return [];
    }
  }


  
  export async function generateQuizFromPDF(pdf) {
    try {
      console.log("üîπ X·ª≠ l√Ω file PDF...");
      
      if (!pdf || !Buffer.isBuffer(pdf)) {
        console.error("‚ùå Buffer PDF kh√¥ng h·ª£p l·ªá");
        return generateFallbackQuestions();
      }
      
      console.log(`üìÑ K√≠ch th∆∞·ªõc buffer PDF: ${pdf.length} bytes`);
      
      // Tr√≠ch xu·∫•t text t·ª´ PDF
      let text = await extractTextFromPDF(pdf);
      
      if (typeof text !== 'string' || text.length < 50 || 
          text.includes("Unable to extract") || 
          text.includes("Error processing PDF")) {
        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t text h·ª£p l·ªá t·ª´ PDF");
        return generateFallbackQuestions();
      }
      
      console.log(`üìù ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ PDF`);
      
      // T·∫°o quiz t·ª´ text
      console.log("üîπ T·∫°o quiz t·ª´ vƒÉn b·∫£n...");
      const res = await generateQuizFromText(text);
      
      if (!res || !Array.isArray(res) || res.length === 0) {
        console.warn("‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi h·ª£p l·ªá t·ª´ generateQuizFromText");
        return generateFallbackQuestions();
      }
      
      console.log(`‚úÖ ƒê√£ t·∫°o ${res.length} c√¢u h·ªèi t·ª´ PDF`);
      return res;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o quiz t·ª´ PDF:", error);
      return generateFallbackQuestions();
    }
  }
  
  // ƒê·ªãnh nghƒ©a h√†m generateFallbackQuestions n·∫øu ch∆∞a c√≥
  function generateFallbackQuestions() {
    return [
      {
        question: "Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF. ƒê√¢y l√† c√¢u h·ªèi m·∫´u thay th·∫ø.",
        type: "Multiple choices",
        difficulty: "trung b√¨nh",
        choices: [
          { text: "PDF kh√¥ng h·ª£p l·ªá", isCorrect: false },
          { text: "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£", isCorrect: true },
          { text: "File qu√° l·ªõn", isCorrect: false },
          { text: "File ƒë√£ b·ªã m√£ h√≥a", isCorrect: false }
        ],
        explanation: "ƒê√¢y l√† c√¢u h·ªèi m·∫´u do kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF."
      },
      {
        question: "B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi file PDF kh√°c kh√¥ng?",
        type: "Multiple choices",
        difficulty: "d·ªÖ",
        choices: [
          { text: "C√≥, t√¥i s·∫Ω th·ª≠ file kh√°c", isCorrect: true },
          { text: "Kh√¥ng, t√¥i kh√¥ng c√≥ file kh√°c", isCorrect: false },
          { text: "T√¥i s·∫Ω th·ª≠ chuy·ªÉn ƒë·ªïi file tr∆∞·ªõc", isCorrect: false },
          { text: "T√¥i mu·ªën t·∫°o quiz theo c√°ch kh√°c", isCorrect: false }
        ],
        explanation: "Th·ª≠ l·∫°i v·ªõi file PDF kh√°c c√≥ th·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ."
      }
    ];
  }

