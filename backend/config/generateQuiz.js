import 'dotenv/config.js';
import axios from 'axios';
import { PDFExtract } from 'pdf.js-extract';
import fs from 'fs';
import path from 'path';
import {fetchImage} from './googleSearch.js';
// Kh·∫Øc ph·ª•c l·ªói file test c·ªßa pdf-parse
const testDir = path.join(process.cwd(), 'backend', 'test', 'data');
const testFile = path.join(testDir, '05-versions-space.pdf');

try {
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }
  
  if (!fs.existsSync(testFile)) {
    // T·∫°o file PDF ƒë∆°n gi·∫£n
    const simplePdf = '%PDF-1.3\n1 0 obj\n<< >>\nendobj\ntrailer\n<< /Root 1 0 R >>\n%%EOF';
    fs.writeFileSync(testFile, simplePdf);
  }
} catch (err) {
  console.error("Could not create test file:", err);
}

const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';

// Kh·ªüi t·∫°o PDFExtract
const pdfExtract = new PDFExtract();

// Thay th·∫ø h√†m extractTextFromPDF
export async function extractTextFromPDF(pdfBuffer) {
  try {
    if (!pdfBuffer || !Buffer.isBuffer(pdfBuffer)) {
      console.error("Invalid PDF buffer provided");
      return "Invalid PDF format";
    }
    
    console.log("üìÑ Processing PDF buffer of size:", pdfBuffer.length, "bytes");
    
    // try {
    //   // B∆∞·ªõc 1: Tr√≠ch xu·∫•t v·ªõi pdf.js-extract
    //   const options = {};
    //   const data = await pdfExtract.extractBuffer(pdfBuffer, options);
      
    //   let extractedText = '';
      
    //   if (data && data.pages) {
    //     // N·ªëi vƒÉn b·∫£n t·ª´ t·∫•t c·∫£ c√°c trang
    //     data.pages.forEach(page => {
    //       page.content.forEach(item => {
    //         extractedText += item.str + ' ';
    //       });
    //       extractedText += '\n\n';
    //     });
    //   }
      
    //   console.log(`üìä Text length from PDF.js: ${extractedText.length} characters`);
      
    //   // N·∫øu tr√≠ch xu·∫•t ƒë∆∞·ª£c √≠t h∆°n 100 k√Ω t·ª±, c√≥ th·ªÉ ƒë√¢y l√† PDF scan
    //   if (extractedText.length < 100) {
    //     console.log("‚ö†Ô∏è PDF c√≥ th·ªÉ l√† scan, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng...");
        
    //     // Tr·∫£ v·ªÅ th√¥ng tin t·∫°m th·ªùi ƒë·ªÉ kh√¥ng l√†m d·ª´ng quy tr√¨nh
    //     return `ƒê√¢y c√≥ th·ªÉ l√† PDF scan ho·∫∑c ƒë∆∞·ª£c b·∫£o v·ªá. 
    //     Vui l√≤ng th·ª≠ m·ªôt file PDF kh√°c c√≥ th·ªÉ tr√≠ch xu·∫•t ƒë∆∞·ª£c text, 
    //     ho·∫∑c t·∫°o c√¢u h·ªèi v·ªÅ ch·ªß ƒë·ªÅ chung thay v√¨ t·ª´ n·ªôi dung PDF.`;
    //   }
      
    //   console.log("‚úÖ Successfully extracted text from PDF");
      
    //   // L∆∞u text v√†o file ƒë·ªÉ ki·ªÉm tra
    //   fs.writeFileSync('extracted_text.txt', extractedText);
    //   console.log("üíæ Saved extracted text to 'extracted_text.txt' for inspection");
      
    //   // In ra m·ªôt ph·∫ßn c·ªßa text ƒë·ªÉ ki·ªÉm tra
    //   console.log("üëÄ Extract preview:", extractedText.substring(0, 200) + "...");
      
    //   return extractedText;
    try {
      const questionsWithImages = await Promise.all(
        parsedQuestions.map(async (question, index) => {
          try {
            // T·∫°o chu·ªói t√¨m ki·∫øm d·ª±a tr√™n n·ªôi dung c√¢u h·ªèi
            const searchQuery = question.question.split(' ').slice(0, 6).join(' ');
            console.log(`üîç T√¨m h√¨nh ·∫£nh cho c√¢u h·ªèi PDF ${index + 1}: "${searchQuery}"`);
            
            // G·ªçi API t√¨m h√¨nh ·∫£nh
            const imageResult = await fetchImage(searchQuery);
            
            if (imageResult && imageResult.url) {
              console.log(`‚úÖ ƒê√£ t√¨m th·∫•y h√¨nh ·∫£nh cho c√¢u h·ªèi PDF ${index + 1}`);
              return {
                ...question,
                imageUrl: imageResult.url
              };
            }
            
            return question;
          } catch (imageError) {
            console.error(`‚ùå L·ªói khi t√¨m h√¨nh ·∫£nh cho c√¢u h·ªèi PDF ${index + 1}:`, imageError.message);
            return question;
          }
        })
      );
      
      return questionsWithImages;
    } catch (pdfError) {
      console.error("Error parsing PDF:", pdfError);
      
      return "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ PDF. ƒê√¢y c√≥ th·ªÉ l√† PDF ƒë∆∞·ª£c scan ho·∫∑c b·∫£o v·ªá.";
    }
  } catch (error) {
    console.error("‚ùå Error handling PDF:", error);
    return "Error processing PDF file";
  }
}

export async function generateQuizGroqToJSON(topic, questionTypes, numberOfQuestions, difficulty) {
  try {
    const prompt = `
      H√£y t·∫°o m·ªôt b√†i quiz g·ªìm ${numberOfQuestions} c√¢u h·ªèi v·ªÅ ch·ªß ƒë·ªÅ "${topic}".
      Y√™u c·∫ßu:
      - C√°c lo·∫°i c√¢u h·ªèi: ${questionTypes.join(', ')}.
      - ƒê·ªô kh√≥: ${difficulty}.
      - C√≥ ƒë·ªô ƒëa d·∫°ng cao kh√¥ng b·ªã l·∫∑p l·∫°i c·∫•u tr√∫c gi·ªØa c√°c c√¢u h·ªèi.
      - Kh√¥ng c√≥ c√¢u h·ªèi n√†o gi·ªëng nhau.
      

      M·ªói c√¢u h·ªèi c·∫ßn ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
      {
        "question": "N·ªôi dung c√¢u h·ªèi",
        "type": "Lo·∫°i c√¢u h·ªèi (one answer,ƒëi·ªÅn v√†o ch·ªó tr·ªëng,ƒë√∫ng/sai,Multiple choices,Number response,Writing response)",
        "difficulty": "M·ª©c ƒë·ªô (d·ªÖ/trung b√¨nh/kh√≥)",
        "choices": [
          {
            "text": "ƒê√°p √°n A",
            "isCorrect": false
          },
          {
            "text": "ƒê√°p √°n B",
            "isCorrect": false
          },
          {
            "text": "ƒê√°p √°n C",
            "isCorrect": false
          },
          {
            "text": "ƒê√°p √°n D",
            "isCorrect": true
          }
        ],
        "explanation": "Gi·∫£i th√≠ch ng·∫Øn g·ªçn cho ƒë√°p √°n"
      }
      
      L∆∞u √Ω quan tr·ªçng:
      1. Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON h·ª£p l·ªá, kh√¥ng c√≥ vƒÉn b·∫£n b·ªï sung
      2. ƒê·ªëi v·ªõi c√¢u h·ªèi TR·∫ÆC NGHI·ªÜM ho·∫∑c ONE ANSWER: Ph·∫£i c√≥ tr∆∞·ªùng "choices" l√† m·ªôt m·∫£ng c√°c l·ª±a ch·ªçn, m·ªói l·ª±a ch·ªçn c√≥ "text" v√† "isCorrect"
      3. ƒê·ªëi v·ªõi c√¢u h·ªèi ƒê√öNG/SAI: Tr∆∞·ªùng "choices" s·∫Ω g·ªìm 2 option { "text": "ƒê√∫ng", "isCorrect": true/false } v√† { "text": "Sai", "isCorrect": true/false }
      4. ƒê·ªëi v·ªõi c√¢u h·ªèi ƒêI·ªÄN V√ÄO CH·ªñ TR·ªêNG ho·∫∑c NUMBER RESPONSE: Kh√¥ng c·∫ßn "choices" nh∆∞ng ph·∫£i c√≥ th√™m tr∆∞·ªùng "answer" ch·ª©a ƒë√°p √°n ƒë√∫ng
      5. ƒê·ªëi v·ªõi WRITING RESPONSE: Kh√¥ng c·∫ßn "choices" nh∆∞ng c√≥ th·ªÉ c√≥ "answer" l√† g·ª£i √Ω ƒë√°p √°n
      
      Tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† m·ªôt m·∫£ng JSON h·ª£p l·ªá, kh√¥ng c√≥ th√™m vƒÉn b·∫£n hay gi·∫£i th√≠ch n√†o kh√°c.
    `;

    console.log("üîπ ƒêang g·ª≠i prompt cho Groq...");
    
    const response = await axios.post(
      GROQ_API_URL,
      {
        model: 'llama-3.3-70b-versatile',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 2048
      },
      {
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const result = response.data.choices[0].message.content;
    console.log("‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ Groq");

    try {
      const jsonMatch = result.match(/\[[\s\S]*\]/);
      let parsedData;
      
      if (jsonMatch) {
        parsedData = JSON.parse(jsonMatch[0]);
        console.log(`üìä ƒê√£ parse ${parsedData.length} c√¢u h·ªèi t·ª´ ph·∫£n h·ªìi`);
      } else {
        parsedData = JSON.parse(result);
        console.log(`üìä ƒê√£ parse d·ªØ li·ªáu t·ª´ ph·∫£n h·ªìi`);
      }
      
      // Th√™m ·∫£nh cho t·ª´ng c√¢u h·ªèi (x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô)
      const questionsWithImages = await Promise.all(
        parsedData.map(async (question, index) => {
          try {
           
            const imageResult = await fetchImage(question.question, topic);
            
            if (imageResult && imageResult.url) {
              console.log(`‚úÖ ƒê√£ t√¨m th·∫•y h√¨nh ·∫£nh cho c√¢u h·ªèi ${index + 1}`);
              return {
                ...question,
                imageUrl: imageResult.url
              };
            }
            
            return question;
          } catch (imageError) {
            console.error(`‚ùå L·ªói khi t√¨m h√¨nh ·∫£nh cho c√¢u h·ªèi ${index + 1}:`, imageError.message);
            return question;
          }
        })
      );
      
      return {
        questions: questionsWithImages
      };
    } catch (parseError) {
      console.error("‚ùå L·ªói khi parse JSON:", parseError);
      console.error("üí¨ Ph·∫£n h·ªìi g·ªëc:", result);
      
      return {
        questions: [
          {
            question: "C√≥ v·∫•n ƒë·ªÅ khi parse JSON. ƒê√¢y l√† c√¢u h·ªèi m·∫´u thay th·∫ø.",
            type: "Multiple choices",
            difficulty: "trung b√¨nh",
            choices: [
              { text: "L·ª±a ch·ªçn A", isCorrect: false },
              { text: "L·ª±a ch·ªçn B", isCorrect: true },
              { text: "L·ª±a ch·ªçn C", isCorrect: false },
              { text: "L·ª±a ch·ªçn D", isCorrect: false }
            ],
            explanation: "ƒê√¢y l√† c√¢u h·ªèi m·∫´u do kh√¥ng th·ªÉ parse ph·∫£n h·ªìi t·ª´ Groq."
          }
        ]
      };
    }
   
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ªçi Groq ho·∫∑c parse JSON:", error.message);
    return {
      questions: []
    };
  }
}

// H√†m t·∫°o quiz t·ª´ vƒÉn b·∫£n
export async function generateQuizFromText(text, numberOfQuestions = 5, difficulty = 'trung b√¨nh') {
  try {
    
    
    // Ki·ªÉm tra text
    if (!text || typeof text !== 'string' || text.length < 100) {
      console.warn("‚ö†Ô∏è Text is too short or invalid");
      return generateSampleQuestions(difficulty);
    }
    
    // T·∫°o prompt 
    const prompt = `
      H√£y t·∫°o ${numberOfQuestions} c√¢u h·ªèi d·∫°ng tr·∫Øc nghi·ªám d·ª±a tr√™n n·ªôi dung sau:
      
      """
      ${text.substring(0, 5000)} ${text.length > 5000 ? '... (vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c c·∫Øt ng·∫Øn)' : ''}
      """
      
      M·ªói c√¢u h·ªèi c·∫ßn ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
      {
        "question": "N·ªôi dung c√¢u h·ªèi",
        "type": "Multiple choices",
        "difficulty": "${difficulty}",
        "choices": [
          {
            "text": "ƒê√°p √°n A",
            "isCorrect": false
          },
          {
            "text": "ƒê√°p √°n B",
            "isCorrect": false
          },
          {
            "text": "ƒê√°p √°n C",
            "isCorrect": false
          },
          {
            "text": "ƒê√°p √°n D",
            "isCorrect": true
          }
        ],
        "explanation": "Gi·∫£i th√≠ch ng·∫Øn g·ªçn cho ƒë√°p √°n"
      }
      
      L∆∞u √Ω quan tr·ªçng:
      1. Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON h·ª£p l·ªá, B·∫ÆT ƒê·∫¶U B·∫∞NG '[' v√† K·∫æT TH√öC B·∫∞NG ']'
      2. Kh√¥ng c√≥ vƒÉn b·∫£n b·ªï sung, ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON
      3. M·ªói c√¢u h·ªèi ph·∫£i c√≥ 4 l·ª±a ch·ªçn, trong ƒë√≥ ch·ªâ c√≥ 1 l·ª±a ch·ªçn ƒë√∫ng
    `;
    
    console.log("üîπ ƒêang g·ª≠i prompt ƒë·ªÉ t·∫°o quiz t·ª´ vƒÉn b·∫£n...");
    
    // G·ªçi API
    const response = await axios.post(
      GROQ_API_URL,
      {
        model: 'llama-3.3-70b-versatile',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 2048
      },
      {
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    // X·ª≠ l√Ω ph·∫£n h·ªìi
    const result = response.data.choices[0].message.content;
    console.log("‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ Groq, ƒë·ªô d√†i:", result.length, "k√Ω t·ª±");
    
    try {
      // T√¨m m·∫£ng JSON trong ph·∫£n h·ªìi
      let jsonData;
      
      // Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ d·∫°ng array kh√¥ng
      if (result.trim().startsWith('[') && result.trim().endsWith(']')) {
        console.log("üîç Ph·∫£n h·ªìi c√≥ ƒë·ªãnh d·∫°ng m·∫£ng JSON, th·ª≠ parse");
        jsonData = JSON.parse(result);
      } else {
        // T√¨m m·∫£ng JSON b·∫±ng regex
        const jsonMatch = result.match(/\[\s*\{[\s\S]*\}\s*\]/);
        if (jsonMatch) {
          console.log("üîç T√¨m th·∫•y m·∫£ng JSON trong ph·∫£n h·ªìi");
          jsonData = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error("Kh√¥ng t√¨m th·∫•y m·∫£ng JSON h·ª£p l·ªá trong ph·∫£n h·ªìi");
        }
      }
      
      if (Array.isArray(jsonData) && jsonData.length > 0) {
        console.log(`‚úÖ ƒê√£ parse ƒë∆∞·ª£c ${jsonData.length} c√¢u h·ªèi`);
        return jsonData;
      } else {
        throw new Error("D·ªØ li·ªáu ph√¢n t√≠ch kh√¥ng ph·∫£i l√† m·∫£ng h·ª£p l·ªá");
      }
    } catch (parseError) {
      console.error("‚ùå L·ªói khi parse JSON:", parseError);
      console.log("üí¨ ƒêo·∫°n ƒë·∫ßu ph·∫£n h·ªìi:", result.substring(0, 200));
      
      return generateSampleQuestions(difficulty);
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o quiz t·ª´ text:", error);
    return generateSampleQuestions(difficulty);
  }
}

function generateSampleQuestions(difficulty) {
  console.log("üîÑ T·∫°o c√¢u h·ªèi m·∫´u v·ªõi ƒë·ªô kh√≥:", difficulty);
  
  return [
    {
      question: "ƒê√¢y l√† c√¢u h·ªèi m·∫´u v·ªÅ t√†i li·ªáu PDF.",
      type: "Multiple choices",
      difficulty: difficulty,
      choices: [
        { text: "ƒê√°p √°n A", isCorrect: false },
        { text: "ƒê√°p √°n B", isCorrect: true },
        { text: "ƒê√°p √°n C", isCorrect: false },
        { text: "ƒê√°p √°n D", isCorrect: false }
      ],
      explanation: "ƒê√¢y l√† c√¢u h·ªèi m·∫´u do kh√¥ng th·ªÉ parse k·∫øt qu·∫£ t·ª´ m√¥ h√¨nh."
    },
    {
      question: "ƒê√¢y l√† c√¢u h·ªèi m·∫´u th·ª© hai.",
      type: "Multiple choices",
      difficulty: difficulty,
      choices: [
        { text: "L·ª±a ch·ªçn 1", isCorrect: false },
        { text: "L·ª±a ch·ªçn 2", isCorrect: false },
        { text: "L·ª±a ch·ªçn 3", isCorrect: true },
        { text: "L·ª±a ch·ªçn 4", isCorrect: false }
      ],
      explanation: "ƒê√¢y l√† gi·∫£i th√≠ch m·∫´u cho c√¢u h·ªèi th·ª© hai."
    }
  ];
}